package workcraft.petri;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.python.core.Py;
import org.python.core.PyObject;

import workcraft.Tool;
import workcraft.ToolType;
import workcraft.WorkCraftServer;
import workcraft.editor.Editor;
import workcraft.editor.EditorPane;
import workcraft.petri.PetriModel;

public class PetriDotGSaver3 implements Tool {
	public static final String _modeluuid = "65f89260-641d-11db-bd13-0800200c9a66";
	public static final String _displayname = "Labelled STG as .g";

	public void writeFile (String path, PetriModel doc) throws IOException
	{
		PrintWriter out = new PrintWriter(new FileWriter(path));

		out.println("# File generated by Workcraft.");
		out.print(".internal");

		HashSet<String> internals = new HashSet<String>();
		HashSet<String> dummies = new HashSet<String>();

		for(EditablePetriTransition t: doc.transitions)
		{
			String s = t.getLabel();
			if (s.indexOf("+") == -1 && s.indexOf("-") == -1)
			{
				dummies.add(s);
				continue;
			}
			
			if (s.indexOf("/") != -1)
			{
				s = s.substring(0, s.indexOf("/"));
			}
			
			s = s.substring(0, s.length() - 1);
			
			internals.add(s);
		}
		for (String s: internals) out.print(" "+s);

		out.println();
		out.print(".dummy");
		
		for (String s: dummies) out.print(" "+s);
		
		out.println();
		out.println(".graph");

		for(EditablePetriTransition t: doc.transitions)
		{
			for(EditablePetriPlace prev: t.getIn())
			{
				if (prev.getIn().size() == 1 && prev.getOut().size() == 1)
				{
					out.println(prev.getIn().getFirst().getLabel()+" "+t.getLabel());
					continue;
				}
					
				out.println(prev.getLabel()+" "+t.getLabel());
			}
		}
		
		for(EditablePetriPlace p: doc.places)
			if (p.getIn().size() != 1 || p.getOut().size() != 1)
			for(EditablePetriTransition prev: p.getIn())
			{
				out.println(prev.getLabel()+" "+p.getLabel());
			}

		out.print(".marking {");

		for(EditablePetriPlace p: doc.places)
			if (p.getTokens()>0)
			{
				if (p.getIn().size() != 1 || p.getOut().size() != 1)
					out.print(" "+p.getLabel());
				else
				{
					out.print(" <" + p.getIn().getFirst().getLabel() + "," + p.getOut().getFirst().getLabel() + ">");			
				}
			}
		out.println(" }");
		out.println(".end");
		out.close();
	}

	public void run(Editor editor, WorkCraftServer server) {
		PetriModel doc = (PetriModel) (editor.getDocument());
		String last_directory = editor.getLastDirectory();

		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new GFileFilter());
		if (last_directory != null)
			fc.setCurrentDirectory(new File(last_directory));
		if (fc.showSaveDialog(null)==JFileChooser.APPROVE_OPTION)
		{
			String path = fc.getSelectedFile().getPath();
			if (!path.endsWith(".g")) path += ".g";
			{
				// saving in .g format
				try
				{
					writeFile(path, doc);
				}
				catch (IOException e)
				{
					JOptionPane.showMessageDialog(null, "File could not be opened for writing.");
					return;
				}					
			}
		}
	}

	public void init(WorkCraftServer server) {
	}

	public boolean isModelSupported(UUID modelUuid) {
		return false;
	}

	public void deinit(WorkCraftServer server) {
		// TODO Auto-generated method stub

	}

	public ToolType getToolType() {
		return ToolType.EXPORT;
	}
}
